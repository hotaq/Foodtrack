// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // Use a hardcoded URL to ensure it's always available
  url = "postgresql://neondb_owner:npg_HL4UfuYA8lpJ@ep-super-breeze-a1ggrbbp-pooler.ap-southeast-1.aws.neon.tech/neondb?sslmode=require"
  relationMode = "foreignKeys"
}

model User {
  id            String    @id @default(cuid())
  name          String    @unique
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role      @default(USER)
  status        UserStatus @default(ACTIVE)
  banReason     String?
  banDate       DateTime?
  isBanned      Boolean   @default(false)
  resetToken    String?
  resetTokenExpiry DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  meals         Meal[]
  favorites     Favorite[]
  streak        Streak?
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Meal {
  id          String    @id @default(cuid())
  type        MealType
  imageUrl    String
  imageKey    String
  date        DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isFood      Boolean   @default(true)
  foodName    String?
  
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  favorites   Favorite[]
}

model Streak {
  id              String   @id @default(cuid())
  currentStreak   Int      @default(0)
  longestStreak   Int      @default(0)
  lastMealDate    DateTime?
  
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Favorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  mealId    String
  meal      Meal     @relation(fields: [mealId], references: [id], onDelete: Cascade)
  
  @@unique([userId, mealId])
}

enum Role {
  USER
  ADMIN
}

enum UserStatus {
  ACTIVE
  BANNED
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
}

model MealTimeSettings {
  id             String   @id @default(cuid())
  breakfastStart Int      @default(6)   // Hour in 24h format (6 = 6:00 AM)
  breakfastEnd   Int      @default(9)   // Hour in 24h format (9 = 9:00 AM)
  lunchStart     Int      @default(12)  // Hour in 24h format (12 = 12:00 PM)
  lunchEnd       Int      @default(15)  // Hour in 24h format (15 = 3:00 PM)
  dinnerStart    Int      @default(16)  // Hour in 24h format (16 = 4:00 PM)
  dinnerEnd      Int      @default(20)  // Hour in 24h format (20 = 8:00 PM)
  updatedAt      DateTime @updatedAt     // Automatically tracks when settings are updated
  updatedBy      String?  // User ID who last updated the settings
}
