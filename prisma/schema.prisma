// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // Use a hardcoded URL to ensure it's always available
  url = "postgresql://neondb_owner:npg_HL4UfuYA8lpJ@ep-super-breeze-a1ggrbbp-pooler.ap-southeast-1.aws.neon.tech/neondb?sslmode=require"
  relationMode = "foreignKeys"
}

model User {
  id            String    @id @default(cuid())
  name          String    @unique
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role      @default(USER)
  status        UserStatus @default(ACTIVE)
  banReason     String?
  banDate       DateTime?
  isBanned      Boolean   @default(false)
  resetToken    String?
  resetTokenExpiry DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  meals         Meal[]
  favorites     Favorite[]
  streak        Streak?
  accounts      Account[]
  sessions      Session[]
  quests        UserQuest[]
  items         UserItem[]
  usedItems     ItemHistory[]
  targetedItems ItemHistory[] @relation("ItemTarget")
  score         Score?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Meal {
  id          String    @id @default(cuid())
  type        MealType
  imageUrl    String
  imageKey    String
  date        DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isFood      Boolean   @default(true)
  foodName    String?
  
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  favorites   Favorite[]
}

model Streak {
  id              String   @id @default(cuid())
  currentStreak   Int      @default(0)
  longestStreak   Int      @default(0)
  lastMealDate    DateTime?
  
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Favorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  mealId    String
  meal      Meal     @relation(fields: [mealId], references: [id], onDelete: Cascade)
  
  @@unique([userId, mealId])
}

enum Role {
  USER
  ADMIN
}

enum UserStatus {
  ACTIVE
  BANNED
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}

model MealTimeSettings {
  id             String   @id @default(cuid())
  breakfastStart Int      @default(6)   // Hour in 24h format (6 = 6:00 AM)
  breakfastEnd   Int      @default(9)   // Hour in 24h format (9 = 9:00 AM)
  lunchStart     Int      @default(12)  // Hour in 24h format (12 = 12:00 PM)
  lunchEnd       Int      @default(15)  // Hour in 24h format (15 = 3:00 PM)
  dinnerStart    Int      @default(16)  // Hour in 24h format (16 = 4:00 PM)
  dinnerEnd      Int      @default(20)  // Hour in 24h format (20 = 8:00 PM)
  updatedAt      DateTime @updatedAt     // Automatically tracks when settings are updated
  updatedBy      String?  // User ID who last updated the settings
}

// Quest system models
model Quest {
  id           String      @id @default(cuid())
  title        String
  description  String
  scoreReward  Int
  imageUrl     String?
  type         QuestType
  requirement  Int         @default(1)    // Number of tasks to complete (e.g., meals, items used)
  isActive     Boolean     @default(true)
  startDate    DateTime?   // When the quest becomes available
  endDate      DateTime?   // When the quest expires
  frequency    String      @default("UNLIMITED") // How often a user can complete this quest: "ONCE", "DAILY", "UNLIMITED"
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  createdBy    String      // Admin who created the quest
  
  userQuests   UserQuest[]
}

model UserQuest {
  id           String      @id @default(cuid())
  userId       String
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  questId      String
  quest        Quest       @relation(fields: [questId], references: [id], onDelete: Cascade)
  progress     Int         @default(0)    // Current progress toward requirement
  isCompleted  Boolean     @default(false)
  completedAt  DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@unique([userId, questId])
}

model Item {
  id           String      @id @default(cuid())
  name         String
  description  String
  imageUrl     String?
  price        Int         // Score cost to purchase
  type         ItemType
  effect       String      // JSON string describing the item's effects
  duration     Int?        // Duration in seconds for time-based effects
  cooldown     Int?        // Cooldown in seconds before item can be used again
  isActive     Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  createdBy    String      // Admin who created the item
  
  userItems    UserItem[]
  itemHistory  ItemHistory[]
}

model UserItem {
  id           String      @id @default(cuid())
  userId       String
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  itemId       String
  item         Item        @relation(fields: [itemId], references: [id], onDelete: Cascade)
  quantity     Int         @default(1)
  lastUsed     DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@unique([userId, itemId])
}

model ItemHistory {
  id           String      @id @default(cuid())
  userId       String
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  itemId       String
  item         Item        @relation(fields: [itemId], references: [id], onDelete: Cascade)
  targetUserId String?     // If item was used on another user
  targetUser   User?       @relation("ItemTarget", fields: [targetUserId], references: [id])
  action       ItemAction
  effectResult String?     // Result of the item effect (JSON)
  createdAt    DateTime    @default(now())
}

model Score {
  id           String      @id @default(cuid())
  userId       String      @unique
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  points       Int         @default(0)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Transaction history
  transactions ScoreTransaction[]
}

model ScoreTransaction {
  id           String      @id @default(cuid())
  scoreId      String
  score        Score       @relation(fields: [scoreId], references: [id], onDelete: Cascade)
  amount       Int         // Positive for earned, negative for spent
  reason       String      // Description of transaction
  sourceType   TransactionType
  sourceId     String?     // ID of the related entity (quest, item purchase, etc.)
  createdAt    DateTime    @default(now())
}

// Enum types for the quest system
enum QuestType {
  MEAL_UPLOAD
  STREAK_ACHIEVEMENT
  ITEM_USE
  ITEM_PURCHASE
  SPECIAL_EVENT
}

enum ItemType {
  STREAK_MODIFIER
  SCORE_MODIFIER
  MEAL_BONUS
  SPECIAL
  CONSUMABLE
  EQUIPMENT
}

enum ItemAction {
  PURCHASE
  USE
  GIFT
  DISCARD
}

enum TransactionType {
  QUEST_REWARD
  ITEM_PURCHASE
  ADMIN_ADJUSTMENT
  ITEM_USE
  ITEM_TARGET
}

// New tables for item use and purchase logging
model ItemUseLog {
  id           String      @id @default(cuid())
  userId       String      
  itemId       String      
  targetUserId String?     // If item was used on another user
  effect       String?     // Result of using the item
  createdAt    DateTime    @default(now())
}

model ItemPurchaseLog {
  id           String      @id @default(cuid())
  userId       String      
  itemId       String      
  price        Int         // Price paid at time of purchase
  createdAt    DateTime    @default(now())
}

// Active effects from items
model ActiveEffect {
  id             String    @id @default(cuid())
  userId         String    
  itemId         String    
  type           String    // Type of effect (SCORE_MULTIPLIER, TIME_EXTENSION, STREAK_PROTECT, etc)
  multiplier     Float?    // For score multiplier effects
  timeExtension  Int?      // Minutes to extend meal submission windows
  expiresAt      DateTime  // When the effect expires
  createdAt      DateTime  @default(now())
}

// System notifications
model Notification {
  id             String    @id @default(cuid())
  title          String
  content        String
  type           String    // Type of notification (SYSTEM, USER, etc)
  isRead         Boolean   @default(false)
  isGlobal       Boolean   @default(false)  // If true, shows to all users
  userId         String?   // Optional: specific user this notification is for
  createdAt      DateTime  @default(now())
}
